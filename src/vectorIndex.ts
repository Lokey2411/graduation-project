import hierarchicalPkg from "hnswlib-node";
import getCollection from "./config/chroma.config.js";
const { HierarchicalNSW } = hierarchicalPkg;

const DIM = 384;

export async function buildIndex(embeddings: number[][]) {
	return {
		vectors: embeddings,
		serialize() {
			return JSON.stringify(this.vectors);
		},
	};
}

export async function saveIndex(index: any, qa: string[][], collectionName = "qa_collection") {
	try {
		// Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·ªÉ l∆∞u\
		const ids = qa.map((_, i) => `qa_${i}`);
		const embeddings = index.vectors;
		const metadatas = qa.map(([question, answer]) => ({ question, answer }));
		const documents = qa.map(([question]) => question); // L∆∞u c√¢u h·ªèi l√†m document
		const collection = await getCollection();
		console.log("L∆∞u vector v√† metadata v√†o collection...");
		await collection.delete({ ids });
		await collection.add({
			ids,
			embeddings,
			documents,
			metadatas,
		});
		console.log("L∆∞u th√†nh c√¥ng v√†o ChromaDB, collection:", collectionName);
	} catch (error) {
		console.error("L·ªói khi l∆∞u v√†o ChromaDB:", error);
		throw error;
	}
}

export async function loadIndex(collectionName = "qa_collection") {
	try {
		console.log("üîå K·∫øt n·ªëi t·ªõi ChromaDB...");
		const collection = await getCollection();
		const results = await collection.get({
			limit: 1000,
			include: ["embeddings", "documents", "metadatas"],
		});

		if (!results?.ids || !results.embeddings || !results.metadatas) {
			throw new Error("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y t√†i li·ªáu ho·∫∑c d·ªØ li·ªáu kh√¥ng ƒë·∫ßy ƒë·ªß");
		}

		// G·ªôp v√† sort theo th·ª© t·ª± id ban ƒë·∫ßu
		const { ids, embeddings, documents, metadatas } = results;

		const sorted = ids
			.map((id, i) => ({
				id,
				embedding: embeddings[i],
				document: documents[i],
				meta: metadatas[i],
			}))
			.sort((a, b) => {
				const nA = parseInt(a.id.replace("qa_", ""));
				const nB = parseInt(b.id.replace("qa_", ""));
				return nA - nB;
			});

		const vectors = sorted.map((item) => item.embedding);
		const qa = sorted.map((item) => [item.meta!.question, item.meta!.answer]);

		// Ki·ªÉm tra kh·ªõp
		if (vectors.length !== qa.length) {
			console.warn(`‚ö†Ô∏è vectors.length (${vectors.length}) ‚â† qa.length (${qa.length})`);
		} else {
			console.log(`‚úÖ T·∫£i d·ªØ li·ªáu th√†nh c√¥ng: ${vectors.length} QA-pairs`);
		}

		return {
			vectors,
			qa,
			serialize() {
				return JSON.stringify(this.vectors);
			},
		};
	} catch (error) {
		console.error("‚ùå L·ªói khi t·∫£i t·ª´ ChromaDB:", error);
		return null;
	}
}
